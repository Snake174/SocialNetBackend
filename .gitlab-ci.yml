stages:
  - build
  - test
  - sonarqube-check
  - package
  - deploy
  - check-exceptions

build:
  stage: build
  only:
    - dev
  tags:
    - socialnet_runner
  script:
    - mvn clean
    - mvn compile -Dmaven.repo.local=./.m2/repository
  cache:
    paths:
      - ./target
      - ./.m2

test:
  stage: test
  only:
    - dev
  tags:
    - socialnet_runner
  script:
    - mvn test -Dmaven.repo.local=./.m2/repository
  cache:
    paths:
      - ./target
      - ./.m2

sonarqube-check:
  stage: sonarqube-check
  tags:
    - socialnet_runner
  only:
    - dev
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - mvn verify sonar:sonar -Dsonar.projectKey=javapro_team37_javaproteams37backend_AYhCd9rcgC1DxgVpVaar -Dsonar.projectName='JavaproTeams37Backend '
  allow_failure: true

package:
  stage: package
  only:
    - dev
  tags:
    - socialnet_runner
  script:
    - mvn package -am -Dmaven.test.skip -T 1C -Dmaven.repo.local=./.m2/repository
  artifacts:
    paths:
      - target/javapro37backend-0.0.1-SNAPSHOT.jar
  cache:
    policy: pull
    paths:
      - ./target
      - ./.m2

deploy:
  stage: deploy
  only:
    - dev
  tags:
    - socialnet_runner
  script:
    - docker-compose down
    - (docker ps -a -q --filter="name=backend" | xargs docker stop | xargs docker rm) || echo "No containers to remove"
    - (docker images -a -q --filter="reference=backend" | xargs docker rmi) || echo "No images to remove"
    - (docker ps -a -q --filter="name=zookeeper" | xargs docker stop | xargs docker rm) || echo "No containers to remove"
    - (docker images -a -q --filter="reference=zookeeper" | xargs docker rmi) || echo "No images to remove"
    - (docker ps -a -q --filter="name=kafka" | xargs docker stop | xargs docker rm) || echo "No containers to remove"
    - (docker images -a -q --filter="reference=kafka" | xargs docker rmi) || echo "No images to remove"
    - (docker images -a -q --filter="dangling=true" | xargs docker rmi) || echo "No images to remove"
    - docker-compose up --build -d

check-exceptions:
  stage: check-exceptions
  only:
    - dev
  tags:
    - socialnet_runner
  script:
    - docker logs backend | grep -v -E 'ExceptionTranslationFilter|MemberIdRequiredException' | grep -e 'Exception' && exit 1
  allow_failure: true
